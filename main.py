import telebot
from telebot import types, util
import requests, sqlite3, traceback as trcb, configparser, time, os, logging, shutil
from datetime import datetime, timedelta
from config import list_full_path, list_dir, list_full_files, list_full_dir
from keyboard import main_keyboard, schedule_keyboard, feedback_keyboard, profile_keyboard, fio_keyboard, admin_keyboard
from keyboard import hide_schedule_keyboard, file_moderation_keyboard
from database import get_ruz_database, get_user_info, get_count_database, get_count_status, get_all_users, create_db
from database import up_user_files, up_ruz_id, up_all_files, get_file_count

config = configparser.ConfigParser()
config.read("misc/settings.ini")
tg_token = config['Telegram']['tg_token']
admin_id = int(config['Telegram']['admin_id'])
chat_link = config['Telegram']['chat_link']

bot = telebot.AsyncTeleBot(tg_token)

logger = telebot.logging
logger.basicConfig(filename='misc/logs.log', level=logging.ERROR,
                   format=' %(asctime)s - %(levelname)s - %(message)s')


@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    try:
        sql = create_db(chat_id)
        if sql is None:
            bot.send_photo(chat_id, open('source_imgs/main_logo.png', 'rb'), caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –±–æ—Ç–µ-–ø–æ–º–æ—â–Ω–∏–∫–µ "
                                                                                     "—Å—Ç—É–¥–µ–Ω—Ç–∞–º –í–®–≠!\n–î–∞–Ω–Ω—ã–π –±–æ—Ç "
                                                                                     "—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "
                                                                                     "—Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∞ - –≤—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ "
                                                                                     "–ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ñ–∞–π–ª—ã –∏ "
                                                                                     "–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ "
                                                                                     "–¥–ª—è —Å–µ–±—è. –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—Ö–æ–¥—è—Ç "
                                                                                     "–º–æ–¥–µ—Ä–∞—Ü–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "
                                                                                     "–∑–∞—Å–æ—Ä–µ–Ω–∏—è –º—É—Å–æ—Ä–æ–º.\n–î–ª—è "
                                                                                     "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º "
                                                                                     "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –§–ò–û, "
                                                                                     "–Ω–æ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ "
                                                                                     "–±–∞–∑–µ –≤ —Ü–µ–ª—è—Ö "
                                                                                     "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n–î–ª—è "
                                                                                     "–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É "
                                                                                     "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ "
                                                                                     "—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ "
                                                                                     "–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
                           reply_markup=fio_keyboard())
        else:
            bot.send_photo(chat_id, open('source_imgs/main_logo.png', 'rb'), caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                           reply_markup=main_keyboard())
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


@bot.message_handler(commands=['admin'])
def admin_panel(message):
    try:
        chat_id = message.chat.id
        if chat_id == admin_id:
            users_count = get_count_database()
            files = get_file_count()
            status = get_count_status()
            bot.send_message(admin_id,
                             f"–ê–¥–º–∏–Ω–∫–∞üíª\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–∞–ª–µ–π –≤ –±–æ—Ç–µ: {users_count}\n\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files}\n\n"
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –≤—Ç–æ—Ä—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: {status}", reply_markup=admin_keyboard())
        else:
            message = bot.send_message(message.chat.id, "–í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—èüß∏")
            message.wait()
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


@bot.message_handler(commands=['help'])
def help_notes(message):
    try:
        chat_id = message.chat.id
        bot.send_message(chat_id,
                         f"‚ö†Ô∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç - –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π.‚ö†Ô∏è\n–ë–æ—Ç, –∫–∞–∫ –∏ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ "
                         f"–ù–ò–£ –í–®–≠. –ü—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∞–ø–∏ –†–£–ó–∞. "
                         f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π –Ω–∏ —Å –∫–∞–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ "
                         f"—Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞.\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∞—è—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n\nüåê - –æ–Ω–ª–∞–π–Ω –ø–∞—Ä–∞(–µ—Å–ª–∏ "
                         f"–ø–∞—Ä–∞ –æ—Ñ–ª–∞–π–Ω, –Ω–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ "
                         f"—Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞)\n\nüîó - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω –ø–∞—Ä—É\n\n\n–£–ø—Ä–æ—â–µ–Ω–∏–µ "
                         f"–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º:\n\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è/–≥—Ä—É–ø–ø—ã/—Å—Ç—É–¥–µ–Ω—Ç–∞ "
                         f"–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏(–≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏), –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å –ø–∞–ø–∫–∞–º–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ "
                         f"—Ñ–∞–π–ª–∞.\n\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n\n–í–∞—à–µ "
                         f"–§–ò–û –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, "
                         f"–≤ –±–∞–∑–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –†–£–ó–∞. –ü–æ —Ç–∞–∫–æ–º—É –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø—É —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ "
                         f"–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ HSE app, –Ω–æ –æ–Ω–æ —Ö—Ä–∞–Ω–∏—Ç –≤–∞—à–µ –§–ò–û –≤ —Ç–æ–º —á–∏—Å–ª–µ.(–ù–µ –ø—É—Ç–∞—Ç—å —Å HSE app X, "
                         f"–≤ –Ω–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É)\n\n–ù–∞–¥–µ—é—Å—å –¥–∞–Ω–Ω—ã–π –±–æ—Ç –æ–∫–∞–∂–µ—Ç—Å—è –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω.",
                         reply_markup=hide_schedule_keyboard())
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    chat_id = call.message.chat.id
    # print(call.message)
    try:
        if call.data == "fio_input":
            # message = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
            if call.message.caption is not None:
                message = bot.edit_message_caption('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', chat_id=chat_id,
                                                   message_id=call.message.id)
                message = message.wait()
            else:
                message = bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', chat_id=chat_id,
                                                message_id=call.message.id)
                message = message.wait()
            bot.register_next_step_handler(message, get_ruz_id)
        if call.data == "feedback":
            message = bot.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å 1 –∫–∞—Ä—Ç–∏–Ω–∫—É):", chat_id=chat_id,
                                            message_id=call.message.id)
            message = message.wait()
            msg = message.id
            bot.register_next_step_handler(message, get_feedback, msg)
        if call.data == "reply_to_user":
            message = bot.send_message(chat_id, "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            message = message.wait()
            bot.register_next_step_handler(message, id_reply)
        if call.data == "send_newsletter":
            if call.message.chat.id == admin_id:
                message = bot.send_message(chat_id, "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π:")
                message = message.wait()
                bot.register_next_step_handler(message, get_newsletter)
        if call.data == "send_user":
            if call.message.chat.id == admin_id:
                message = bot.send_message(chat_id, "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                message = message.wait()
                bot.register_next_step_handler(message, user_send)
        if call.data == "del_sch":
            bot.delete_message(chat_id, call.message.id)
        if call.data == "acc_file":
            if call.message.chat.id == admin_id:
                filename = call.message.document.file_name
                cmsid = call.message.id
                message = bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:")
                message = message.wait()
                bot.register_next_step_handler(message, sort_files, filename, message.id, cmsid)
        if call.data == "dec_file":
            os.remove(f"unsorted/{call.message.document.file_name}")
            bot.delete_message(admin_id, call.message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    try:
        chat_id = message.chat.id
        # print(chat_id)
        # print(get_ruz_database(chat_id))
        # print(sql.fetchone() is not None)
        # print(get_ruz_database(chat_id) != 0)
        # print((sql.fetchone() is not None) and (get_ruz_database(chat_id) != 0))
        if get_ruz_database(chat_id) != 0:
            # if message.text == 'üîÑ–°–º–µ–Ω–∏—Ç—å –§–ò–û':
            if message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
                user_str = 'üë§–ü—Ä–æ—Ñ–∏–ª—å\n\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: '
                info = get_user_info(chat_id)
                # print(info[1])
                user_str = user_str + info[0] + '.\n\n–í–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ' + info[1] + ' —Ñ–∞–π–ª–æ–≤.'
                bot.send_message(chat_id, user_str, reply_markup=profile_keyboard())
            if message.text == '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è':
                bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
            if message.text == 'üìÑ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π:", reply_markup=schedule_keyboard())
            if message.text == '–ó–∞–≤—Ç—Ä–∞':
                ruz_id = get_ruz_database(chat_id)
                # print(ruz_id)
                if datetime.isoweekday(datetime.today()) != 6:
                    today = datetime.today()
                    tomorrow = today + timedelta(days=1)  # 1 –¥–µ–Ω—å (–∑–∞–≤—Ç—Ä–∞)
                    # print(tomorrow)
                    date1 = datetime.date(tomorrow)
                    # print(date1)
                    get_schedule(date1, date1, chat_id, ruz_id)
                else:
                    today = datetime.today()
                    tomorrow = today + timedelta(days=2)  # 2 –¥–Ω—è (–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ —Ç.–∫. —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞)
                    # print(tomorrow)
                    date1 = datetime.date(tomorrow)
                    bot.send_message(chat_id, "–ó–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:")
                    get_schedule(date1, date1, chat_id, ruz_id)
            if message.text == '–°–µ–≥–æ–¥–Ω—è':
                ruz_id = get_ruz_database(chat_id)
                # print(ruz_id)
                if datetime.isoweekday(datetime.today()) != 7:
                    today = datetime.today()
                    today = today
                    date1 = datetime.date(today)
                    get_schedule(date1, date1, chat_id, ruz_id)
                else:
                    bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.")
            if message.text == '–ù–µ–¥–µ–ª—è':
                ruz_id = get_ruz_database(chat_id)
                # bot.send_message(chat_id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
                date1 = datetime.today()
                if datetime.isoweekday(date1) != 1 and datetime.isoweekday(date1) != 7:
                    date1 = date1 + timedelta(days=-(datetime.isoweekday(date1) - 1))
                if datetime.isoweekday(date1) == 7:
                    date1 = date1 + timedelta(days=1)
                if datetime.isoweekday(date1) == 1:
                    date1 = date1
                date2 = date1 + timedelta(days=6)
                # print(datetime.date(date1), ' ', datetime.date(date2))
                get_schedule(datetime.date(date1), datetime.date(date2), chat_id, ruz_id)
            if message.text == '–ú–µ—Å—è—Ü':
                # bot.send_message(chat_id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü")
                ruz_id = get_ruz_database(chat_id)
                date1 = datetime.today()
                # print(int(str(datetime.date(date1))[8:]))
                if int(str(datetime.date(date1))[8:]) != 1 and int(str(datetime.date(date1))[8:]) != 30 and int(
                        str(datetime.date(date1))[8:]) != 31:
                    date1 = date1 + timedelta(days=-(int(str(datetime.date(date1))[8:]) - 1))

                if int(str(datetime.date(date1))[8:]) == 30:
                    date1 = date1 + timedelta(days=2)
                if int(str(datetime.date(date1))[8:]) == 31:
                    date1 = date1 + timedelta(days=1)
                if int(str(datetime.date(date1))[8:]) == 1:
                    date1 = date1
                date2 = date1 + timedelta(days=30)
                # print(datetime.date(date1), ' ', datetime.date(date2))
                get_schedule(datetime.date(date1), datetime.date(date2), chat_id, ruz_id)
            if message.text == "–ü—Ä–µ–ø–æ–¥.":
                message = bot.send_message(chat_id,
                                           f"–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä:\n(`–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω "
                                           f"–ò–≤–∞–Ω–æ–≤–∏—á "
                                           f"{datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}-{datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}`)",
                                           parse_mode="Markdown")
                message = message.wait()
                bot.register_next_step_handler(message, prepod_input)
            if message.text == "–ê—É–¥.":
                message = bot.send_message(chat_id,
                                           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä:\n(`300 {datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}-{datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}`)",
                                           parse_mode="Markdown")
                message = message.wait()
                bot.register_next_step_handler(message, room_input)
            if message.text == "–ì—Ä—É–ø–ø–∞":
                message = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä:\n("
                                                    f"`–ì–†–ü192 {datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}-{datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}`)",
                                           parse_mode="Markdown")
                message = message.wait()
                bot.register_next_step_handler(message, group_input)
            if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
                message = bot.send_message(chat_id,
                                           f"–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä:\n(`–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á {datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}-{datetime.strptime(str(datetime.date(datetime.today())), '%Y-%m-%d').strftime('%Y.%m.%d')}`)",
                                           parse_mode="Markdown")
                message = message.wait()
                bot.register_next_step_handler(message, student_input)
            if message.text == "üì•–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª":
                message = bot.send_message(chat_id, f"üóÇ/\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:\n{list_full_dir('stud_files')}",
                                           parse_mode="Markdown")
                message = message.wait()
                msg_id = message.id
                bot.register_next_step_handler(message, dir_input, msg_id)
            if message.text == "üì§–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
                message = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–ö—É—Ä—Å`\n\n_–í–µ—Å —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–º–± (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –¥–ª—è –±–æ—Ç–æ–≤), –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ dropmefiles.com –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—É(–≤ –ø—Ä–æ—Ñ–∏–ª–µ)._",
                                           parse_mode="Markdown")
                message = message.wait()
                msg_id = message.id
                bot.register_next_step_handler(message, file_info_input, msg_id)
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.", reply_markup=fio_keyboard())
        # time.sleep(3)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def sort_files(message, filename, msid, cmsid):
    try:
        dir1 = message.text
        dir2 = dir1
        dir1 = dir1.split('/')[-2:][0]
        dir2 = dir2.split('/')[-1:][0]
        #print(dir1, dir2)
        if os.path.exists(f"stud_files/{dir1}") == False:
            os.mkdir(f"stud_files/{dir1}")
            os.mkdir(f"stud_files/{dir1}/{dir2}")
            path = shutil.move(f"unsorted/{filename}", f"stud_files/{message.text}")
            up_all_files()
            bot.send_message(admin_id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            bot.delete_message(admin_id, msid)
            bot.delete_message(admin_id, cmsid)
        elif os.path.exists(f"stud_files/{dir1}") == True and os.path.exists(f"stud_files/{dir1}/{dir2}") == True:
            path = shutil.move(f"unsorted/{filename}", f"stud_files/{message.text}")
            up_all_files()
            bot.send_message(admin_id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            bot.delete_message(admin_id, msid)
            bot.delete_message(admin_id, cmsid)
        elif os.path.exists(f"stud_files/{dir1}") == True and os.path.exists(f"stud_files/{dir1}/{dir2}") == False:
            #print(os.path.exists(f"stud_files/{dir2}"))
            os.mkdir(f"stud_files/{dir1}/{dir2}")
            path = shutil.move(f"unsorted/{filename}", f"stud_files/{message.text}")
            up_all_files()
            bot.send_message(admin_id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            bot.delete_message(admin_id, msid)
            bot.delete_message(admin_id, cmsid)
    except Exception as e:
        bot.send_message(admin_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))



def file_info_input(message, msg_id):
    chat_id = message.chat.id
    # print(chat_id)
    #print(message.document.file_name)
    try:
        if message.document is not None and message.caption is not None:
            link = f'[{str(message.from_user.first_name)}](tg://user?id={str(message.chat.id)})'
            file_info = bot.get_file(message.document.file_id)
            file_info = file_info.wait()
            uploaded_file = bot.download_file(file_info.file_path)
            uploaded_file = uploaded_file.wait()
            src = f'unsorted/' + message.document.file_name
            with open(src, 'wb') as new_file:
                new_file.write(uploaded_file)
            doc = open(src, 'rb')
            up_user_files(chat_id)
            bot.reply_to(message, "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
            bot.send_document(admin_id, doc,
                              caption=f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {link} (`{chat_id}`)\n\n`{message.caption}`",
                              parse_mode="Markdown", reply_markup=file_moderation_keyboard())
            # bot.send_document(admin_id, uploaded_file, caption=f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {link} (`{chat_id}`) - <<`{message.document.file_name}`>>\n\n{message.caption}", parse_mode="Markdown")
        elif message.document is None:
            bot.send_message(chat_id, "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        elif message.caption is None:
            bot.send_message(chat_id, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å.")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def dir_input(message, msg_id):
    chat_id = message.chat.id
    try:
        course = message.text
        if os.path.exists(f"stud_files/{course}"):
            drs = list_full_path(f"stud_files/{course}")
            # print(drs)
            # splitted_text = util.smart_split(drs, chars_per_string=3000)
            # for text in splitted_text:
            bot.delete_message(chat_id, message.id)
            message = bot.edit_message_text(f"üóÇ/{message.text}/\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:\n{drs}", chat_id=chat_id,
                                            message_id=msg_id, parse_mode="Markdown")
            # message = bot.send_message(chat_id, text, parse_mode="Markdown")
            message = message.wait()
            bot.register_next_step_handler(message, file_input, msg_id, course)
        else:
            bot.send_message(chat_id, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.delete_message(chat_id, msg_id)
            bot.delete_message(chat_id, message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def file_input(message, msg_id, course):
    chat_id = message.chat.id
    try:
        dir = f"stud_files/{course}/{str(message.text)}"
        drs = list_full_files(dir)
        # print(drs)
        if os.path.exists(dir):
            # splitted_text = util.smart_split(drs, chars_per_string=3000)
            # for text in splitted_text:
            bot.delete_message(chat_id, message.id)

            message = bot.edit_message_text(f"üóÇ/{course}/{message.text}/\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:\n{drs}", chat_id=chat_id,
                                            message_id=msg_id, parse_mode="Markdown")
            # message = bot.send_message(chat_id, text, parse_mode="Markdown")
            message = message.wait()
            bot.register_next_step_handler(message, file_download, msg_id, dir)
        else:
            bot.send_message(chat_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.delete_message(chat_id, msg_id)
            bot.delete_message(chat_id, message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def file_download(message, msg_id, dir):
    chat_id = message.chat.id
    try:
        doc = open(f"{dir}/{message.text}", 'rb')
        task1 = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞üì®")
        task2 = bot.send_document(chat_id, doc)
        task1 = task1.wait()
        task2.wait()
        doc.close()
        task11 = bot.delete_message(chat_id, task1.id)
        task11.wait()
        task22 = bot.delete_message(chat_id, msg_id)
        task22.wait()
        task33 = bot.delete_message(chat_id, message.id)
        task33.wait()
    except FileNotFoundError:
        bot.send_message(chat_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.delete_message(chat_id, msg_id)
        bot.delete_message(chat_id, message.id)
    except NotADirectoryError:
        bot.send_message(chat_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.delete_message(chat_id, msg_id)
        bot.delete_message(chat_id, message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def student_input(message):
    chat_id = message.chat.id
    try:
        student_num = str(message.text)[:-21]
        date1 = str(message.text)[-21:-11]
        # print(message.text)
        date2 = str(message.text)[-10:]
        r1 = requests.get(f'https://ruz.hse.ru/api/search?term={student_num}&type=student')
        # print(date1, date2)
        # print(room_num)
        students = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
        # print(len(r1.json()))
        if len(message.text) >= 22:
            if r1.status_code == 200:
                if len(r1.json()) != 0:
                    for i in range(len(r1.json())):
                        students = students + f"ü§ì({i + 1}) {r1.json()[i]['label']}\n{r1.json()[i]['description']}\n\n"
                    message = bot.send_message(chat_id, students)
                    message = message.wait()
                    msg_id = message.id
                    bot.register_next_step_handler(message, sev_students, r1, date1, date2, msg_id)
                else:
                    bot.send_message(chat_id, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û.")

            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def room_input(message):
    chat_id = message.chat.id
    try:
        room_num = str(message.text)[:-21]
        date1 = str(message.text)[-21:-11]
        # print(message.text)
        date2 = str(message.text)[-10:]
        r1 = requests.get(f'https://ruz.hse.ru/api/search?term={room_num}&type=auditorium')
        # print(date1, date2)
        # print(room_num)
        rooms = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
        # print(len(r1.json()))
        if len(message.text) >= 22:
            if r1.status_code == 200:
                if len(r1.json()) != 0:
                    for i in range(len(r1.json())):
                        rooms = rooms + f"üö™({i + 1}) {r1.json()[i]['label']}\n{r1.json()[i]['description']}\n\n"
                    message = bot.send_message(chat_id, rooms)
                    message = message.wait()
                    msg_id = message.id
                    bot.register_next_step_handler(message, sev_rooms, r1, date1, date2, msg_id)
                else:
                    bot.send_message(chat_id, "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.")
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def group_input(message):
    chat_id = message.chat.id
    try:
        group_num = str(message.text)[:-21]
        date1 = str(message.text)[-21:-11]
        # print(message.text)
        date2 = str(message.text)[-10:]
        # print(date1, date2)
        r1 = requests.get(f'https://ruz.hse.ru/api/search?term={group_num}&type=group')
        # print(group_num)
        groups = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
        if len(message.text) >= 22:
            if r1.status_code == 200:
                if len(r1.json()) != 0:
                    for i in range(len(r1.json())):
                        groups = groups + f"üë•({i + 1}) {r1.json()[i]['label']}\n{r1.json()[i]['description']}\n\n"
                    message = bot.send_message(chat_id, groups)
                    message = message.wait()
                    msg_id = message.id
                    bot.register_next_step_handler(message, sev_groups, r1, date1, date2, msg_id)
                else:
                    bot.send_message(chat_id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.")
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def prepod_input(message):
    chat_id = message.chat.id
    try:
        # print(str(message.text)[-22:])
        # print(str(message.text)[:-22])
        # print(r1.json())
        # print(message.text)
        date = str(message.text)[-21:]
        # print(date)
        date1 = str(date)[:10]
        # print(date1, '||')
        date2 = str(date)[11:]
        # print(date2)
        # print(str(message.text)[:-22])
        r1 = requests.get(f'https://ruz.hse.ru/api/search?term={str(message.text)[:-22]}&type=person')
        prepods = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
        if len(message.text) >= 22:
            # print(r1.status_code, r1.json())
            if r1.status_code == 200:
                if len(r1.json()) != 0:
                    for i in range(len(r1.json())):
                        prepods = prepods + f"üë®‚Äçüè´({i + 1}) {r1.json()[i]['label']}\n{r1.json()[i]['description']}\n\n"
                    message = bot.send_message(chat_id, prepods)
                    message = message.wait()
                    msg_id = message.id
                    bot.register_next_step_handler(message, sev_preps, r1, date1, date2, msg_id)
                else:
                    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def parse_schedule(chat_id, r):
    try:
        # print(len(r.json()), 10)
        chkerr = str(r.text)[:7]
        chkerr = chkerr[2:]
        # print(chkerr)
        # print(r.json())
        if chkerr != "error":
            if len(r.json()) != 0:
                rasp_str = ''
                date = ''
                #print(len(r.json()))
                for i in range(len(r.json())):
                    if date != r.json()[i]['date']:
                        date = r.json()[i]['date']
                        rasp_str = rasp_str + f"\n<u>üóì{datetime.strptime(date, '%Y.%m.%d').strftime('%d.%m')}</u> (<i>{r.json()[i]['dayOfWeekString']}</i>)\n"
                    ptype = r.json()[i]['kindOfWork']
                    aud = str(r.json()[i]['auditorium'])
                    if str(ptype) == "–õ–µ–∫—Ü–∏—è Online" or str(ptype) == "–õ–µ–∫—Ü–∏—è":
                        ptype = "–õ–µ–∫"
                    elif str(ptype) == "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ" or str(ptype) == "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ Online":
                        ptype = "–ü—Ä–∞–∫"
                    elif str(ptype) == "–°–µ–º–∏–Ω–∞—Ä" or str(ptype) == "–°–µ–º–∏–Ω–∞—Ä Online":
                        ptype = "–°–µ–º"
                    else:
                        ptype = ptype
                    type = str(r.json()[i]['auditorium'])
                    #print(type)
                    #print(type == "On-line" or type == "on-line" or type == "On-Line")
                    if type.find("On-line") != -1 or type.find("on-line") != -1 or type.find("On-Line") != -1 or type.find("Online") != -1 or type.find("online") != -1:
                        aud = "üåê"
                    if r.json()[i]["url1"] is not None:
                        if len(r.json()[i]["url1"]) != 0:
                            link = f"<a href='{r.json()[i]['url1']}'>üîó</a>"
                            rasp_str = rasp_str + f"üïê<b>{r.json()[i]['lessonNumberStart']} [{r.json()[i]['beginLesson']}] </b>{str(r.json()[i]['discipline'])[:-6]} <i>{ptype}</i>|{aud} {link}\n"
                        else:
                            rasp_str = rasp_str + f"üïê<b>{r.json()[i]['lessonNumberStart']} [{r.json()[i]['beginLesson']}] </b>{str(r.json()[i]['discipline'])[:-6]} <i>{ptype}</i>|{aud}\n"
                    else:
                        rasp_str = rasp_str + f"üïê<b>{r.json()[i]['lessonNumberStart']} [{r.json()[i]['beginLesson']}] </b>{str(r.json()[i]['discipline'])[:-6]} <i>{ptype}</i>|{aud}\n"
                splitted_text = util.smart_split(rasp_str, chars_per_string=3000)
                for text in splitted_text:
                    message = bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=hide_schedule_keyboard(), disable_web_page_preview=True)
                    message.wait()
                # bot.send_message(chat_id, rasp_str)
            else:
                bot.send_message(chat_id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.')
        elif chkerr == "error":
            bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑.')

        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
    # except KeyError:
    #    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def get_newsletter(message):
    usr_list = get_all_users()
    # print(usr_list)
    try:
        cpt = message.caption
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        file_info = file_info.wait()
        pinned_file = bot.download_file(file_info.file_path)
        pinned_file = pinned_file.wait()
        k = 0
        for usr in usr_list:
            task = bot.send_photo(usr[0], pinned_file, caption=cpt, parse_mode="Markdown")
            # print(pinned_file)
            # print(cpt)
            task.wait()
            k += 1
        bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ *{k}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", parse_mode="Markdown")
    except TypeError:
        k = 0
        for usr in usr_list:
            # print(usr, usr[0])
            task = bot.send_message(usr[0], message.text, parse_mode="Markdown")
            task.wait()
            k += 1

        bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ *{k}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", parse_mode="Markdown")
    except Exception as e:
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def get_schedule(date1, date2, chat_id, ruz_id):
    try:
        payload = {'start': date1, 'finish': date2, 'lng': 1}
        r1 = requests.get(f'https://ruz.hse.ru/api/schedule/student/{ruz_id}?', params=payload)
        # print(date1, date2, ruz_id)
        # print(r1.json())
        parse_schedule(chat_id, r1)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def get_feedback(message, pmsg):
    chat_id = message.chat.id
    try:
        link = f'[{str(message.from_user.first_name)}](tg://user?id={str(message.chat.id)})'
        msg = message
        user_str = 'üë§–ü—Ä–æ—Ñ–∏–ª—å\n\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: '
        info = get_user_info(chat_id)
        # print(info[1])
        user_str = user_str + info[0] + '.\n\n–í–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ' + info[1] + ' —Ñ–∞–π–ª–æ–≤.'
        if message.photo is not None:
            cpt = message.caption
            # print(str(cpt))
            file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
            file_info = file_info.wait()
            pinned_file = bot.download_file(file_info.file_path)
            pinned_file = pinned_file.wait()
            splitted_text = util.smart_split(str(cpt), chars_per_string=3000)
            for text in splitted_text:
                message = bot.send_photo(admin_id, pinned_file,
                                         caption=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {link} (`{chat_id}`) - {str(datetime.time(datetime.today()))[:8]}\n\n{text}",
                                         parse_mode="Markdown", reply_markup=feedback_keyboard())
                message.wait()

            bot.edit_message_text(user_str, chat_id=chat_id, message_id=pmsg, reply_markup=profile_keyboard())
            bot.reply_to(msg, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            splitted_text = util.smart_split(message.text, chars_per_string=3000)
            for text in splitted_text:
                message = bot.send_message(admin_id,
                                           f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {link}(`{chat_id}`) - {str(datetime.time(datetime.today()))[:8]}\n\n{text}",
                                           parse_mode="Markdown", reply_markup=feedback_keyboard())
                message.wait()
            bot.edit_message_text(user_str, chat_id=chat_id, message_id=pmsg, reply_markup=profile_keyboard())
            bot.reply_to(msg, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            # repl.wait()
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def id_reply(message):
    chat_id = message.chat.id
    try:
        rep_id = message.text
        message = bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å 1 –∫–∞—Ä—Ç–∏–Ω–∫–æ–π:")
        message = message.wait()
        bot.register_next_step_handler(message, send_reply, rep_id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def user_send(message):
    chat_id = message.chat.id
    try:
        rep_id = message.text
        message = bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å 1 –∫–∞—Ä—Ç–∏–Ω–∫–æ–π:")
        message = message.wait()
        bot.register_next_step_handler(message, send_reply, rep_id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def send_reply(message, rep_id):
    try:
        cpt = message.caption
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        file_info = file_info.wait()
        pinned_file = bot.download_file(file_info.file_path)
        pinned_file = pinned_file.wait()
        bot.send_photo(rep_id, pinned_file,
                       caption=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç *–∞–¥–º–∏–Ω–∞*:\n\n{cpt}",
                       parse_mode="Markdown")
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except TypeError:
        bot.send_message(rep_id,
                         f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç *–∞–¥–º–∏–Ω–∞*:\n\n{message.text}",
                         parse_mode="Markdown")
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def get_ruz_id(message):
    chat_id = message.chat.id
    msg_id = message.id
    # print(str(message.text))
    try:
        if str(message.text) != "None":

            fio = str(message.text)
            r1 = requests.get(f'https://ruz.hse.ru/api/search?term={fio}&type=student')
            if r1.status_code == 200:
                if len(r1.json()) == 1:
                    one_person_ruz(chat_id, r1)
                elif len(r1.json()) == 0:
                    bot.send_message(chat_id, "–°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=fio_keyboard())
                else:
                    students = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –§–ò–û, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
                    for i in range(len(r1.json())):
                        students = students + f"üë§({i + 1}) {r1.json()[i]['label']}\n{r1.json()[i]['description']}\n\n"
                    # print(students)
                    message = bot.send_message(chat_id, students)
                    message = message.wait()
                    bot.register_next_step_handler(message, sev_person_ruz, r1, msg_id, message.id)
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.edit_message_text("‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑.", chat_id=chat_id,
                                  message_id=msg_id,
                                  reply_markup=fio_keyboard())
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def one_person_ruz(chat_id, r1):
    try:
        st_id = r1.json()[0]['id']
        # print(st_id)
        up_ruz_id(st_id, chat_id)
        bot.send_message(chat_id,
                         f"üëã{r1.json()[0]['label']}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è "
                         f"–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
                         reply_markup=main_keyboard())
    except Exception as e:
        bot.send_message(chat_id, "‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑.", reply_markup=fio_keyboard())
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def sev_person_ruz(message, r1, msg_id, pmsg_id):
    chat_id = message.chat.id
    # print(admin_id, chat_id)
    try:
        if message.text.isdigit():
            num = int(message.text) - 1
            if 0 <= num <= len(r1.json()) - 1:
                st_id = r1.json()[num]['id']
                # print(st_id)
                up_ruz_id(st_id, chat_id)
                # task = bot.edit_message_text(f"üëã{r1.json()[num]['label']}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.", chat_id=chat_id, message_id=pmsg_id, reply_markup=profile_keyboard())
                task1 = bot.send_message(chat_id,
                                         f"üëã{r1.json()[num]['label']}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
                                         reply_markup=main_keyboard())
                task2 = bot.delete_message(chat_id, pmsg_id)
                task3 = bot.delete_message(chat_id, message.id)
                task1.wait()
                task2.wait()
                task3.wait()
            else:
                task1 = bot.edit_message_text("‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑.", chat_id=chat_id,
                                              message_id=pmsg_id,
                                              reply_markup=fio_keyboard())
                task2 = bot.delete_message(chat_id, message.id)
                task1.wait()
                task2.wait()
        else:
            task1 = bot.edit_message_text("‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑.", chat_id=chat_id,
                                          message_id=msg_id,
                                          reply_markup=fio_keyboard())
            task2 = bot.delete_message(message.chat.id, message.message_id)
            task1.wait()
            task2.wait()
    except ValueError as e:
        print(trcb.format_exc(e))
        task1 = bot.edit_message_text("‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑.", chat_id=chat_id,
                                      message_id=msg_id,
                                      reply_markup=fio_keyboard())
        task2 = bot.delete_message(message.chat.id, message.message_id)
        task1.wait()
        task2.wait()
    except Exception as e:
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))
        task1 = bot.edit_message_text("‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑.", chat_id=chat_id,
                                      message_id=msg_id,
                                      reply_markup=fio_keyboard())
        task2 = bot.delete_message(message.chat.id, message.message_id)
        task1.wait()
        task2.wait()


def sev_rooms(message, r1, date1, date2, msg_id):
    chat_id = message.chat.id
    try:
        if str(message.text).isdigit():
            num = int(message.text) - 1
            if 0 <= num <= len(r1.json()) - 1:
                rm_id = r1.json()[num]['id']
                # print(rm_id)
                payload = {'start': date1, 'finish': date2, 'lng': 1}
                r2 = requests.get(f'https://ruz.hse.ru/api/schedule/auditorium/{rm_id}?', params=payload)
                # print(date1, date2, r2.text)
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
                parse_schedule(chat_id, r2)
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.delete_message(chat_id, msg_id)
            bot.delete_message(chat_id, message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def sev_students(message, r1, date1, date2, msg_id):
    chat_id = message.chat.id
    try:
        if str(message.text).isdigit():
            num = int(message.text) - 1
            # print(len(r1.json()), num)
            if 0 <= num <= len(r1.json()) - 1:
                st_id = r1.json()[num]['id']
                # print(gr_id)
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
                get_schedule(date1, date2, chat_id, st_id)
                # payload = {'start': date1, 'finish': date2, 'lng': 1}
                # r2 = requests.get(f'https://ruz.hse.ru/api/schedule/group/{st_id}?', params=payload)
                # print(date1, date2, r2.text)
                # parse_schedule(message.chat.id, r2)
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.delete_message(chat_id, msg_id)
            bot.delete_message(chat_id, message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def sev_groups(message, r1, date1, date2, msg_id):
    chat_id = message.chat.id
    try:
        if str(message.text).isdigit():
            num = int(message.text) - 1
            if 0 <= num <= len(r1.json()) - 1:
                gr_id = r1.json()[num]['id']
                # print(gr_id)
                payload = {'start': date1, 'finish': date2, 'lng': 1}
                r2 = requests.get(f'https://ruz.hse.ru/api/schedule/group/{gr_id}?', params=payload)
                # print(date1, date2, r2.text)
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
                parse_schedule(chat_id, r2)
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.delete_message(chat_id, msg_id)
            bot.delete_message(chat_id, message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


def sev_preps(message, r1, date1, date2, msg_id):
    chat_id = message.chat.id
    try:
        if str(message.text).isdigit():
            num = int(message.text) - 1
            if 0 <= num <= len(r1.json()) - 1:
                pr_id = r1.json()[num]['id']
                # print(date1, date2)
                payload = {'start': date1, 'finish': date2, 'lng': 1}
                r2 = requests.get(f'https://ruz.hse.ru/api/schedule/person/{pr_id}?', params=payload)
                # print(date1, date2, r2.json())
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
                parse_schedule(chat_id, r2)
            else:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
                bot.delete_message(chat_id, msg_id)
                bot.delete_message(chat_id, message.id)
        else:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.delete_message(chat_id, msg_id)
            bot.delete_message(chat_id, message.id)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
        err1 = str(trcb.format_exc())[84:]
        err1 = err1.split('\n')[:-1][0]
        err2 = str(trcb.format_exc())
        err2 = err2.split('\n')[-2:][0]
        logger.error(f"{err1} {err2}")
        print(str(trcb.format_exc()))


if __name__ == '__main__':
   try:
       bot.polling(True)
   except: #Exception as e:
       err1 = str(trcb.format_exc())[84:]
       err1 = err1.split('\n')[:-1][0]
       err2 = str(trcb.format_exc())
       err2 = err2.split('\n')[-2:][0]
       logger.error(f"{err1} {err2}")
       print(str(trcb.format_exc()))
       bot.polling(True)
